package io.javabrains.springsecurityjpa.controller;

import io.javabrains.springsecurityjpa.entity.Product;
import io.javabrains.springsecurityjpa.entity.Questionnaire;
import io.javabrains.springsecurityjpa.entity.Sport;
import io.javabrains.springsecurityjpa.helpers.TokenHelper;
import io.javabrains.springsecurityjpa.helpers.ValidateHelper;
import io.javabrains.springsecurityjpa.model.*;
import io.javabrains.springsecurityjpa.models.User;
import io.javabrains.springsecurityjpa.service.ProductService;
import io.javabrains.springsecurityjpa.service.SportService;
import io.javabrains.springsecurityjpa.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

@Controller
@RequestMapping("/user")
public class UserController {
    private UserService userService;

    @Autowired
    ProductService productService;

    @Autowired
    SportService sportService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/profile")
    public String showProfilePage(Model model, Principal principal) {

        String email = principal.getName();
        User user = userService.getbyEm(email);

        model.addAttribute("information", user);


        return "profile";
    }


//SIGN IN

    @GetMapping("/n")
    public String addUser(Model model){
        model.addAttribute("userRequest", new UserRequest());
        return "new";
    }

    @PostMapping("/create")
    public String create(@ModelAttribute("userRequest") UserRequest userRequest) {
        boolean result = userService.saveUser(userRequest);
        if (result) {
            userService.pass(userRequest);
            return "redirect:/user/sportall";
        }
        return "redirect:/user/profile";
    }

//PRODUCTS  SHOWING LIST

    @GetMapping("/productall")
    public String productss(Model model){
        List<Product> product = productService.get();
        model.addAttribute("prodRequest", product);
        return "listpro";
    }



//SPORT  SHOWING LIST

    @GetMapping("/sportall")
    public String sportss(Model model){
        List<Sport> sport = sportService.get();
        model.addAttribute("sportRequest", sport);
        return "listspo";
    }


    // Get information about user

    @GetMapping("/get")

    public ResponseEntity getUserById(@RequestParam Integer id) {

        User userRequest = userService.getUser(id);
        if (userRequest == null) {
            return new ResponseEntity("User not found", HttpStatus.NOT_FOUND);
        }
        return ResponseEntity.ok(userRequest);
    }




    // checking email

    @GetMapping("/email") public ResponseEntity checkEmail(@RequestParam String email) {
        return ResponseEntity.ok(ValidateHelper.validate(email));
    }


// ADD PRODUCT TO USER

    @GetMapping("/addProducts/{id}")
    public String addProducts(@PathVariable("id") List<Integer> id, Principal principal) {
        User user = userService.getbyEm(principal.getName());
        long idf = user.getId();
        boolean res = userService.addProductsToUser((int)idf, id);
        if(res){
            return "redirect:/user/productall";
        }
        return "You are not log in!";
    }

    // Delete products from user


    @GetMapping("/delProducts/{id}")
    public String delProducts(@PathVariable("id") Integer id, Principal principal ){
        User user = userService.getbyEm(principal.getName());
        long us_id = user.getId();
        List<Integer> product = new ArrayList<>();
        product.add((int)id);
        boolean res = userService. deleteProductsToUser((int)us_id, product);

        if(res){
            return "redirect:/user/profile";
        }
        else {
            return"Not found";
        }
    }



    @PostMapping("/addQuest")
    public ResponseEntity addQuest(@RequestBody AddQuest request) {
        boolean res = userService.addQuestToUser(request.getUserId(), request.getQuestIds());
        if(res) {
            return ResponseEntity.ok().body("You added questionnaire.");
        }
        return ResponseEntity.badRequest().body("You are not log in!");
    }



    @PostMapping("/delQuest")
    public ResponseEntity delQuest(@RequestBody AddQuest request) {
        boolean res = userService. deleteQuestToUser(request.getUserId(), request.getQuestIds());
        if(res) {
            return ResponseEntity.ok().body("You delete questionnaire from user.");
        }
        return ResponseEntity.badRequest().body("You are not log in!");
    }

    // Add existing sport by ID to user




    @GetMapping("/addSport/{id}")
    public String addSport(@PathVariable("id") List<Integer> id, Principal principal) {
        User user = userService.getbyEm(principal.getName());
        long idf = user.getId();
        boolean res = userService.addSportToUser((int)idf, id);
        if(res){
            return  "redirect:/user/sportall";
        }
        return "You are not log in!";
    }


    // Delete sport from user

    @GetMapping("/delSport/{id}")
    public String delSport(@PathVariable("id") Integer id, Principal principal ){
        User user = userService.getbyEm(principal.getName());
        long us_id = user.getId();
        List<Integer> sport = new ArrayList<>();
        sport.add((int)id);
        boolean res = userService. deleteSportToUser((int)us_id, sport);

        if(res){
            return "redirect:/user/profile";
        }
        else {
            return"Not found";
        }
    }

    // Update info about user


    @GetMapping("/updateinfo")
    public String updateUser(Model model){
        model.addAttribute("userReq", new UserRequest());

        return "update_info";
    }



    @PostMapping("/update")
    public String updateUser(@ModelAttribute("userReq") UserRequest userRequest) {
        boolean res = userService.updateUser(userRequest);
        if (res) {

            return "redirect:/user/profile";
        } else {
            return "There is a mistake. You are not login!";
        }
    }

    //CREATE QUESTIONNAIRE

    @GetMapping("/questcreate")
    public String quCreate(Model model){
        model.addAttribute("questRequest", new QuestionnaireRequest());

        return "quest";
    }


    @PostMapping("/createquest")
    public String questionnaire(@ModelAttribute("questRequest") QuestionnaireRequest qRequest, Principal principal){
        boolean result = userService.quest(qRequest);
        if (result) {
            User user = userService.getbyEm(principal.getName());
            Questionnaire q = userService.getQuest(qRequest.getEmail());
            long us_id = user.getId();
            List<Integer> quest = new ArrayList<>();
            long q_id = q.getId();
            quest.add((int)q_id);
            boolean res = userService.addQuestToUser((int)us_id, quest);
            //double nn = 447,6 + (9.2 * qRequest.getWeight()) + (3.1* qRequest.getHeight()) - (4.3*qRequest.getAge());
            double n = qRequest.calories(qRequest.getWeight(),qRequest.getHeight(),qRequest.getAge());
            /*return new ResponseEntity("You need to eat " + n +" calories per a day to safe your form." + "\n" +
                    "If you want to loose weight you need to eat "+ (n-200)+ " calories per a day."+ "\n" +
                    "If you want to gain weight you need to eat " + (n+200) + " calories per a day." + "\n" + qRequest, HttpStatus.CREATED);
*/
            return "redirect:/user/profile";
        }
        return "bad request";
    }


    // UPDATE QUESTIONNAIRE

    @GetMapping("/updatequest")
    public String updateQuest(Model model){
        model.addAttribute("questReq", new QuestionnaireRequest());

        return "edit_quest";
    }



    @PostMapping("/updatequestionnaire")
    public String updateQuest(@ModelAttribute("questReq") QuestionnaireRequest qRequest) {
        boolean res = userService.updateQuest(qRequest);
        if (res) {

            return "redirect:/user/profile";
        } else {
            return "There is a mistake. You are not login!";
        }
    }




    @GetMapping("/getquest") public ResponseEntity getQuest(@RequestParam(value = "email", required =true) String email) {
        Questionnaire qRequest = userService.getQuest(email);
        if (qRequest == null) {
            return new ResponseEntity("Questionnaire not found", HttpStatus.NOT_FOUND);
        }
        return ResponseEntity.ok(qRequest);
    }



    @PostMapping("/auth") public ResponseEntity auth(HttpServletRequest request) {
        String authorization = request.getHeader("Authorization");
        return authorization != null
                ? ResponseEntity.ok("OK")
                : new ResponseEntity("-", HttpStatus.UNAUTHORIZED);
    }








    @GetMapping(path = "/users", produces = MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody
    List<User> getAll() {
        return this.userService.getAll();
    }
}
